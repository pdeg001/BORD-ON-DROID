Build1=Default,nl.pdeg.bordondroid
File1=Baloo2-Regular.ttf
File10=mouse.png
File11=rob.jpg
File12=rva.png
File13=selectlocation.bal
File14=ServerBoard.bal
File15=sven_oud.jpg
File16=sven1.jpg
File17=uwlogo.jpg
File18=wacht_op_data.png
File2=biljarter.png
File3=clvBorden.bal
File4=clvLocation.bal
File5=clvSelectLocation.bal
File6=digital-7.ttf
File7=locations.bal
File8=main.bal
File9=materialdesignicons-webfont.ttf
FileGroup1=font
FileGroup10=img
FileGroup11=img
FileGroup12=img
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=img
FileGroup16=img
FileGroup17=img
FileGroup18=img
FileGroup2=img
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=font
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=font
Group=Default Group
Library1=core
Library10=accessibility
Library2=jmqtt
Library3=randomaccessfile
Library4=json
Library5=xui views
Library6=phone
Library7=runtimepermissions
Library8=b4xloadingindicatorpdeg
Library9=xui
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="29"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>~\n~	<uses-permission android:name="android.permission.INTERNET"/>~\n~	)~\n~'SetActivityAttribute(Main, "android:excludeFromRecents", "true")~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~SetApplicationAttribute(android:icon, "@mipmap/ic_launcher")~\n~CreateResource(mipmap-anydpi-v26, ic_launcher.xml,~\n~<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">~\n~    <background android:drawable="@mipmap/background"/>~\n~    <foreground android:drawable="@mipmap/foreground"/>~\n~</adaptive-icon>~\n~)~\n~SetActivityAttribute("serverBoard",~\n~    android:screenOrientation,~\n~    "landscape"~\n~)~\n~SetActivityAttribute("Main",~\n~    android:screenOrientation,~\n~    "portrait"~\n~)~\n~'End of default text.~\n~
Module1=Base
Module2=ClassSetFontSize
Module3=locations
Module4=MqttConnector
Module5=SelectLocation
Module6=ServerBoard
Module7=Starter
NumberOfFiles=18
NumberOfLibraries=10
NumberOfModules=7
Version=10.2
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: Bord Op Droid
	#VersionCode: 12
	#VersionName: 1.1.7
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
	#BridgeLogger: true
#End Region

#Region  Activity Attributes 
	#FullScreen: false
	#IncludeTitle: false
#End Region

Sub Process_Globals
	Type Message (Body As String, From As String)
	Type bordStatus(ip As String, name As String, timeStamp As Long, alive As Boolean, players As String)
	Type bordFound(name As String, ip As String)
	Type locationBord(code As String, description As String, isdefault As String)
	Type pubBordData(data As List, from As String)
	Private tmrBordLastAlive As Timer
	Private baseFile As Base
	Private baseList As List
	Private mqttBaseSubBord As MqttConnector
	Private timeOut As Timer
	Private timeOutSeconds As Timer
	Private secondsLeft As Int
	Private clsFunc As ClassSetFontSize
End Sub

Sub Globals
	Private lblBordName As Label
	Private pnlBord As Panel
	Private lblLastCheck As Label
	Private pnlNobords As Panel
	Private lblVersion As Label
	Private pnlLocationCOde As Panel
	Private btnCancel As Button
	Private btnOk As Button
	Private pnlLocation As Panel
	Private clvServer As CustomListView
	Private lblCurrLocation As Label
	Private lblNoBord As Label
	Private pnlLocationList As Panel
	Private edtFloatCode As B4XFloatTextField
	Private edtFloatDescription As B4XFloatTextField
'	Private B4XLoadingIndicator1 As B4XLoadingIndicator
'	Private B4XLoadingIndicator2 As B4XLoadingIndicator
	Private connectTime As Long
	Private lblPLayer As Label
	Private pnlReload As Panel
	Private lblAliveIndicator As Label
	Private B4XLoadingIndicatorBiljartBall1 As B4XLoadingIndicatorBiljartBall
	Private B4XLoadingIndicatorBiljartBall2 As B4XLoadingIndicatorBiljartBall
	Private lblLastUpdate As Label
	Private lblHeaderBg As Label
End Sub

Sub Activity_Create(FirstTime As Boolean)
	clsFunc.Initialize
	Activity.LoadLayout("main")
'	Log(GetDeviceLayoutValues.ApproximateScreenSize)
'	lblNoBord.TextSize = lblNoBord.TextSize / access.GetUserFontScale
	clsFunc.ResetUserFontScale(Activity)
	
	timeOutSeconds.Initialize("timeOutSeconds", 1000)
	timeOut.Initialize("timeOut", 20*1000)
	tmrBordLastAlive.Initialize("tmrBordAlive", 10000)
	If FirstTime Then mqttBaseSubBord.Initialize
	
	Starter.appVersion = $"${Application.LabelName} v${Application.VersionName}"$
	lblVersion.Text = Starter.appVersion
	baseFile.Initialize
	pnlNobords.Visible = False
End Sub

Sub Activity_Resume
	ShowSelectLocationButton
	
	If Starter.locationSelected Then
		CheckConnected
		Return
	End If
	If Starter.mainPaused Then
		
		CheckBordInServerlist
		ResumeConnection(True)
		Starter.mainPaused = False
		ReconnectToLocation
'		Starter.pingMqtt = True
'		Starter.ConnectAndReconnect
		'mqttBaseSubBord.Connect
	Else
		ResumeConnection(True)
		getBaseList
	End If
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	timeOutSeconds.Enabled = False
	timeOut.Enabled = False
	If pnlNobords.Visible Then
	pnlNobords.SetVisibleAnimated(0, False)
	End If
	
'	Starter.serverList.Initialize
	Starter.mainPaused = True
	Starter.pingMqtt = False
	ResumeConnection(False)
	mqttBaseSubBord.Disconnect
	
	If UserClosed Then
		Starter.mainPaused = False
		Activity.Finish
	End If
	
End Sub

Private Sub CheckConnected
	If clvServer.Size > 0 And Starter.selectedLocationCode = lblCurrLocation.Text Then
		mqttBaseSubBord.Connect
		tmrBordLastAlive.Enabled = True
		Return
	End If
	secondsLeft = timeOut.Interval/1000
	Starter.serverList.Initialize
	clvServer.Clear
	lblCurrLocation.Text = Starter.selectedLocationDescription
	B4XLoadingIndicatorBiljartBall1.Show
	B4XLoadingIndicatorBiljartBall2.Show
	pnlNobords.Visible = True
	timeOutSeconds.Enabled = True
	Starter.locationSelected = False
	ResumeConnection(True)
	ReconnectToLocation
End Sub

Private Sub timeOutSeconds_Tick
	Dim dispSeconds As String
	
	secondsLeft = secondsLeft -1
	If secondsLeft <= 0 Then
		timeOut_Tick
		Return
	End If
	
	If secondsLeft < 10 Then
		dispSeconds = $"0${secondsLeft}"$
	Else	
		dispSeconds = $"${secondsLeft}"$
	End If
	
	lblNoBord.Text = $"Wachten op borden (${dispSeconds})"$
	Sleep(0)
End Sub

Private Sub timeOut_Tick
	timeOutSeconds.Enabled = False
	timeOut.Enabled = False
	lblAliveIndicator.Visible = False
	lblNoBord.Text = $"Wachten op borden"$
	Msgbox2Async("Geen borden gevonden of aktief", Application.LabelName, "OKE", "","", Application.Icon, False)
	If pnlNobords.Visible Then
		pnlNobords.SetVisibleAnimated(1500, False)
		DisconnectMqtt
	End If
End Sub

Private Sub CheckBordInServerlist
	If Starter.serverList.Size > 0 Then
		clvServer.Clear
		For Each bs As bordStatus In Starter.serverList
			clvServer.Add(genUnitList(bs.name, bs.alive, bs.players), "")
		Next
	End If
	
End Sub

'Sub setBordLastAliveTimer
'	tmrBordLastAlive.Enabled = True
''	ReconnectToLocation
'End Sub

Private Sub StartConnection
	
	lblNoBord.Text = $"Wachten op borden (${"20"})"$
	secondsLeft = timeOut.Interval/1000
	timeOut.Enabled = True
	timeOutSeconds.Enabled = True
	pnlLocationCOde.Visible = False
	B4XLoadingIndicatorBiljartBall1.Show
	B4XLoadingIndicatorBiljartBall2.Show
''	Sleep(0)
	pnlNobords.Visible = True
	clvServer.Clear
	mqttBaseSubBord.Initialize
	mqttBaseSubBord.Connect

	baseFile.GetBase

'	tmrBordLastAlive.Initialize("tmrBordAlive", 10000)
	tmrBordLastAlive.Enabled = True
	connectTime = DateTime.Now
	
End Sub

''Sub setConnectedTime(firstMsgTime As Long)
''	connectTime = firstMsgTime
''End Sub

Private Sub getBaseList
	Dim listSize As Int = 0

	baseList.Initialize
	baseList = baseFile.GetBase
	
'	If CallSub(baseFile, "CheckBaseListExists") = False Then
'		pnlLocationCOde.Visible = True
'		Return
'	End If
	
	If baseList.Size = 0 Then
		pnlLocationCOde.Visible = True
		Return
	End If
	
	If baseList.IsInitialized Then
		listSize = baseList.Size
	End If
	If listSize > 1 Then
		pnlLocationList.SetVisibleAnimated(500, True)
	Else
		pnlLocationList.SetVisibleAnimated(500, False)
	End If
	
	lblNoBord.Text = "Wachten op borden"
		
	If baseList.IsInitialized = False Then
		pnlLocationCOde.Visible = True
	Else If clvServer.Size > 0 Then
'		Log("P")	
	Else If baseList.Size = 1 Then
		Dim loc As locationBord
		loc.Initialize
		loc = baseList.Get(0)
		Starter.selectedLocationCode = loc.code
		Starter.selectedLocationDescription = loc.description
		lblCurrLocation.Text = loc.description
		InitConnection
	Else
		StartActivity(SelectLocation)
	End If
End Sub

Public Sub StartSelectedLocation
	Dim loc As locationBord
	loc.Initialize
	loc = baseList.Get(0)
'	Starter.selectedLocationCode = loc.code
'	Starter.selectedLocationDescription = loc.description
	lblCurrLocation.Text = loc.description
	InitConnection
End Sub

Sub ReconnectToLocation
	timeOut.Enabled = True
	mqttBaseSubBord.Initialize
	CallSub2(Starter, "SetLastWill", "bordpubdied")
	CallSub2(Starter, "SetSubBase", Starter.selectedLocationCode)
	CallSub2(Starter, "SetSubString2", "/pubbord")
	CallSub2(Starter, "SetUnsubscribeString2", "")
	mqttBaseSubBord.Connect
End Sub

'subscribe to get bord on location
'Sub InitConnection
Sub InitConnection
	If mqttBaseSubBord.connected Then mqttBaseSubBord.Disconnect
	lblCurrLocation.Text = Starter.selectedLocationDescription
	CallSub2(Starter, "SetLastWill", "bordpubdied")
	CallSub2(Starter, "SetSubBase", Starter.selectedLocationCode)
	CallSub2(Starter, "SetSubString2", "/pubbord")
	CallSub2(Starter, "SetUnsubscribeString2", "")
	
	StartConnection
End Sub

'subscribe to bord data
Sub clvServer_ItemClick (Index As Int, Value As Object)
	Dim p As Panel = clvServer.GetPanel(Index)
	Dim unit As String
	
	unit = baseFile.GetSelectedLabelTagFromPanel(p, "name")
	If baseFile.GetBordAlive(unit) = False Then
		baseFile.ShowCustomToast($"Bord niet gevonden, controleer of het bord "online" is"$, False, Colors.Red)
		Return
	End If
	
	Starter.mainPaused = True
	Starter.DiscoveredServer = unit
	CallSub2(Starter, "SetLastWill", "recvdied")
	CallSub2(Starter, "SetUnit", PrepTopicName(unit).ToLowerCase)
	DisconnectMqtt
	Sleep(100)
	StartActivity(ServerBoard)
End Sub

Sub tmrBordAlive_Tick
	If Not(checkConnectTime) Then Return
	CheckLastAliveTime
End Sub

Sub checkConnectTime As Boolean
	Return True
'	If connectTime <> -1 Then
'		Log("KWDKWMKDM")
'		pnlNobords.Visible = True
'		mqttBaseSubBord.Disconnect
'		tmrBordLastAlive.Enabled = False
'		pnlNobords.Visible = False
'		Msgbox2Async("Geen borden gevonden", Application.LabelName, "OKE", "", "", Application.Icon, False)
'		Return False
'	End If
'	Return True
End Sub

Sub CheckLastAliveTime
	'Return
	
	If clvServer.Size = 0 Then Return
	Dim currTime As Long = DateTime.Now
'	Dim timeDiff As Long
'	Dim clvIndex, serverListIndex As Int
'	Dim bordAlive As Boolean = True
	
	If lblLastCheck.IsInitialized = False Then
		lblNoBord.Visible = False
		Return
	End If
	lblLastCheck.Text = $"Laatste controle $Time{DateTime.Now}"$
'	Log($"Time Diff $Time{DateTime.Now}"$)
	
	For Each bd As bordStatus In Starter.serverList
		Dim timeDiff As Long = currTime-bd.timeStamp
		If timeDiff >= Starter.serverDied Then
			bd.alive = False
			baseFile.SetBordDiedByName(bd.name, clvServer, bd.alive)
		Else
			baseFile.SetBordDiedByName(bd.name, clvServer, bd.alive)
		End If
	Next
	
End Sub

Sub ShowNotConnectedToBroker
	lblNoBord.Text = "Verbinding borden verbroken"
	pnlNobords.SetVisibleAnimated(1000, True)
	mqttBaseSubBord.Disconnect
End Sub

Sub ResumeConnection(resume As Boolean)
	tmrBordLastAlive.Interval = 10*1000
	tmrBordLastAlive.Enabled = resume
End Sub

Private Sub Activity_KeyPress(KeyCode As Int) As Boolean
	If KeyCode = KeyCodes.KEYCODE_BACK Then
		tmrBordLastAlive.Enabled = False
		DisconnectMqtt
		Activity.Finish
		
		Return False
	Else
		Return False
	End If
End Sub

Sub DisconnectMqtt
	If mqttBaseSubBord.connected Then
		mqttBaseSubBord.Disconnect
	End If
	If CheckClientConnected Then
		mqttBaseSubBord.Disconnect
	End If
	
End Sub

Sub genUnitList(name As String, alive As Boolean, players As String) As Panel
	Dim p As Panel
	p.Initialize(Me)
	p.SetLayout(0dip, 0dip, clvServer.AsView.Width, 125dip) '190
	p.LoadLayout("clvBorden")
	p.Tag = name
	
	lblBordName.Text = $"${name.Trim}"$
	lblPLayer.Text = baseFile.SetPlayertext(players)
	lblPLayer.Tag = "players"
	If Not(alive) Then
		lblHeaderBg.Color = Colors.Red
		lblBordName.Color = Colors.Red
		lblBordName.TextColor = Colors.White
	End If
	clsFunc.ResetUserFontScale(p)
	Return p
End Sub

Sub CheckBordExists(bord As Message)
	timeOut.Enabled = False
	timeOutSeconds.Enabled = False
	If lblAliveIndicator.Visible Then
		lblAliveIndicator.SetVisibleAnimated(500, False)
	Else
		lblAliveIndicator.SetVisibleAnimated(500, True)
	End If
	Dim bordExists As Boolean = False
	Dim strPlayers As String

	If bord.Body.Length = 0 Then Return
	Dim name As String = bord.Body
	
	'GET DATA FROM NAME
	strPlayers = name'baseFile.SetPlayertext(name)
	If name.IndexOf("|") > -1 Then
		Dim strData() As String = Regex.Split("\|", name)
		name = strData(0)
	End If
	
	
	connectTime = -1
	If Starter.serverList.Size = 0 Then
		AddUnkownIp("", name, strPlayers)
		Return
	End If
	
	For Each lst As bordStatus In Starter.serverList
		If lst.name = name Then
			bordExists = True
			lst.timeStamp = DateTime.Now
			lst.alive = True
			'CHECK PLAYERS
			baseFile.CheckPlayers(strPlayers, name, clvServer)
		End If
	Next
	
	If Not(bordExists) Then
		AddUnkownIp("", name, strPlayers)
		Return
	End If
End Sub

Sub AddUnkownIp(ip As String, name As String, players As String)
	Dim bordStatus As bordStatus
	bordStatus.Initialize
	bordStatus.ip = ip
	bordStatus.name = name
	bordStatus.players = players
	bordStatus.timeStamp = DateTime.Now
	bordStatus.alive = True
	
	Starter.serverList.Add(bordStatus)
	CheckIpInClv(bordStatus, players)
	baseFile.SetBordDiedByName(name, clvServer, True)
	
	If clvServer.GetSize > 0 Then
		pnlNobords.SetVisibleAnimated(500, False)
	Else 
		pnlNobords.SetVisibleAnimated(500, True)	
	End If
	
	Sleep(400)
	
End Sub

Sub CheckIpInClv(bord As bordStatus, players As String)
	Dim p As Panel
	
	For i = 0 To clvServer.GetSize-1
		p = clvServer.GetPanel(i)
		If p.Tag = bord.name Then
'			baseFile.SetPanelLabelItemText(p, "lblLastCheck", $"Laatste controle $Time{DateTime.Now}"$)
			baseFile.SetBordDiedByName(bord.name, clvServer, bord.alive)
		End If
	Next
	
'	Log("------ ADD BORD TO LIST")
	pnlNobords.SetVisibleAnimated(1000, False)
	clvServer.Add(genUnitList(bord.name, bord.alive, players), "")
End Sub

Sub lblViewBord_Click
	Dim v As View = Sender
	Dim p As Panel = v.Parent
	
	clvServer_ItemClick (clvServer.GetItemFromView(p), Null)
End Sub

Private Sub PrepTopicName(bord As String) As String
	Return bord.Replace(" ", "")
End Sub

Sub btnCancel_Click
	Msgbox2Async("Applicatie afsluiten?", Application.LabelName, "JA", "", "NEE", Application.Icon, False)
	Wait For Msgbox_Result(Result As Int)
	If Result = DialogResponse.POSITIVE Then
		Activity.Finish
	End If
End Sub

Sub btnOk_Click
	If edtFloatCode.Text = "" Then
		Msgbox2Async("Locatie code mag niet leeg zijn", Application.LabelName, "OKE", "", "", Application.Icon, False)
		Wait For Msgbox_Result(Result As Int)
		Return
	End If
	
	Dim ime As IME
	ime.Initialize(Me)
	Starter.testBaseName = True
	Starter.selectedLocationCode = edtFloatCode.Text
'	CallSub2(Starter, "SetLastWill", "bordpubdied")
	Starter.SetLastWill("bordpubdied")
'	CallSub2(Starter, "SetSubBase", Starter.selectedLocationCode)
	Starter.SetSubBase(Starter.selectedLocationCode)
'	CallSub2(Starter, "SetSubString2", "/pubbord")
	Starter.SetSubString2("/pubbord")
'	CallSub2(Starter, "SetUnsubscribeString2", "")
	Starter.SetUnsubscribeString2("")
	mqttBaseSubBord.Initialize
	Sleep(100)
	mqttBaseSubBord.Connect
	
	Sleep(1000)
	
	If mqttBaseSubBord.connected = False Then
		Msgbox2Async("Kan geen verbinding maken met locatie", Application.LabelName, "OKE", "", "", Application.Icon, False)
		Wait For Msgbox_Result(Result As Int)
	Else
		Dim code, description As String
		lblCurrLocation.Text = edtFloatDescription.Text	
		Starter.selectedLocationDescription = edtFloatDescription.Text
		code = edtFloatCode.Text
		If edtFloatDescription.Text = "" Then edtFloatDescription.Text = "Nieuwe locatie"
		description = edtFloatDescription.Text
		'ToastMessageShow("Verbonden met locatie", True)
		'baseFile.createCustomToast("Verbonden met locatie", Colors.White)
		mqttBaseSubBord.Disconnect
		pnlLocationCOde.Visible = False
		baseFile.SetBase(code, description, "1")
		InitConnection
		ime.HideKeyboard
	End If
End Sub

Sub edtLocationCode_TextChanged (Old As String, New As String)
	If New.Length > 0 Then
		btnOk.Enabled = True
	Else
		btnOk.Enabled = False
	End If
End Sub

Sub pnlLocation_Click

	If CheckClientConnected Then
		mqttBaseSubBord.Disconnect
	End If
	StartActivity(locations)
End Sub

Private Sub CheckClientConnected As Boolean
	Return CallSub(mqttBaseSubBord, "GetClientConnected")
End Sub

Sub pnlLocationList_Click
	StartActivity(SelectLocation)
End Sub

Sub edtFloatDescription_TextChanged (Old As String, New As String)
	
End Sub

Sub edtFloatCode_TextChanged (Old As String, New As String)
	If New.Length > 0 Then
		btnOk.Enabled = True
	Else
		btnOk.Enabled = False
	End If
End Sub

Sub DeletedLocationActive
	mqttBaseSubBord.Disconnect
	clvServer.Clear
	getBaseList
End Sub

Sub ShowSelectLocationButton
	pnlLocationList.Visible = baseFile.GetBase.Size > 1	
End Sub

Sub ConnectionError
	'baseFile.ShowCustomToast("MQTT Fout", True, Colors.Red)
	
End Sub

Sub pnlReload_Click
	timeOutSeconds.Enabled = True
	clvServer.Clear
	Starter.serverList.Initialize
	mqttBaseSubBord.Disconnect
	InitConnection
	'getBaseList
End Sub
