Build1=Default,nl.pdeg.bordondroid
File1=Baloo2-Regular.ttf
File10=selectlocation.bal
File11=ServerBoard.bal
File12=sven_oud.jpg
File13=sven1.jpg
File14=wacht_op_data.png
File2=clvBorden.bal
File3=clvLocation.bal
File4=clvSelectLocation.bal
File5=digital-7.ttf
File6=locations.bal
File7=main.bal
File8=materialdesignicons-webfont.ttf
File9=mouse.png
FileGroup1=font
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=img
FileGroup13=img
FileGroup14=img
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=font
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=font
FileGroup9=img
Group=Default Group
Library1=core
Library2=jmqtt
Library3=randomaccessfile
Library4=json
Library5=xui views
Library6=phone
Library7=runtimepermissions
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="28"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>~\n~	<uses-permission android:name="android.permission.INTERNET"/>~\n~	)~\n~'SetActivityAttribute(Main, "android:excludeFromRecents", "true")~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~SetApplicationAttribute(android:icon, "@mipmap/ic_launcher")~\n~CreateResource(mipmap-anydpi-v26, ic_launcher.xml,~\n~<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">~\n~    <background android:drawable="@mipmap/background"/>~\n~    <foreground android:drawable="@mipmap/foreground"/>~\n~</adaptive-icon>~\n~)~\n~SetActivityAttribute("serverBoard",~\n~    android:screenOrientation,~\n~    "landscape"~\n~)~\n~SetActivityAttribute("Main",~\n~    android:screenOrientation,~\n~    "portrait"~\n~)~\n~'End of default text.~\n~
Module1=Base
Module2=locations
Module3=mqttGetBordData
Module4=mqttGetBords
Module5=SelectLocation
Module6=ServerBoard
Module7=Starter
NumberOfFiles=14
NumberOfLibraries=7
NumberOfModules=7
Version=9.801
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: Bord Op Droid
	#VersionCode: 1
	#VersionName: 0.51
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
	#BridgeLogger: true
#End Region

#Region  Activity Attributes 
	#FullScreen: false
	#IncludeTitle: false
#End Region

Sub Process_Globals
	Type Message (Body As String, From As String)
	Type bordStatus(ip As String, name As String, timeStamp As Long, alive As Boolean)
	Type bordFound(name As String, ip As String)
	Type locationBord(code As String, description As String, isdefault As String)
	
	Private mqttGetBord As mqttGetBords
	Private mqttGetData As mqttGetBordData
	Private tmrBordLastAlive As Timer
	Private baseFile As Base
	Private baseList As List
End Sub

Sub Globals
'	Private clvServer As CustomListView
	Private lblBordName As Label
	Private lblViewBord As Label
	Private pnlBord As Panel
	Private lblLastCheck As Label
	Private pnlNobords As Panel
'	Private B4XLoadingIndicator1 As B4XLoadingIndicator
	Private lblVersion As Label
	Private pnlLocationCOde As Panel
	Private edtLocationCode As EditText
	Private btnCancel As Button
	Private btnOk As Button
	Private pnlLocation As Panel
'	Private CustomListView1 As CustomListView
	Private clvServer As CustomListView
	Private lblCurrLocation As Label
	Private lblNoBord As Label
	Private pnlLocationList As Panel
	Private edtFloatCode As B4XFloatTextField
	Private edtFloatDescription As B4XFloatTextField
	Private B4XLoadingIndicator1 As B4XLoadingIndicator
	Private B4XLoadingIndicator2 As B4XLoadingIndicator
	Private BordDiedProgress As B4XLoadingIndicator
	Private connectTime As Long
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("main")
	
	mqttGetBord.Initialize
	
	Starter.appVersion = $"${Application.LabelName} v${Application.VersionName}"$
	lblVersion.Text = Starter.appVersion
	baseFile.Initialize
	pnlNobords.Visible = False
End Sub

Private Sub StartConnection
	pnlLocationCOde.Visible = False
	B4XLoadingIndicator1.Show
	B4XLoadingIndicator2.Show
	Sleep(10)
	pnlNobords.Visible = True
	clvServer.Clear
	mqttGetData.Initialize
	mqttGetBord.Initialize
	mqttGetBord.SetPubBord
	mqttGetBord.Connect
	
	baseFile.GetBase

	tmrBordLastAlive.Initialize("tmrBordAlive", 10000)
	tmrBordLastAlive.Enabled = True
	connectTime = DateTime.Now
	
End Sub

Sub setConnectedTime(firstMsgTime As Long)
	connectTime = firstMsgTime
End Sub

Private Sub getBaseList
	Dim listSize As Int = 0
	'Return
	baseList.Initialize
	baseList = baseFile.GetBase
	If baseList.IsInitialized Then
		listSize = baseList.Size
	End If
	If listSize > 1 Then
		edtFloatCode.RequestFocusAndShowKeyboard
		pnlLocationList.SetVisibleAnimated(500, True)
		Sleep(200)
	Else
		pnlLocationList.SetVisibleAnimated(500, False)
		Sleep(200)
	End If
	
	lblNoBord.Text = "Wachten op borden..."
		
	If baseList.IsInitialized = False Then
		pnlLocationCOde.Visible = True
	Else If baseList.Size = 1 Then
		Dim loc As locationBord
		loc.Initialize
		loc = baseList.Get(0)
		lblCurrLocation.Text = loc.description
		InitConnection(loc.code, loc.description)
	Else
		StartActivity(SelectLocation)
	End If
End Sub

Sub InitConnection(locationCode As String, location As String)
	If mqttGetBord.connected Then mqttGetBord.Disconnect
	Starter.serverList.Initialize
	clvServer.Clear
	lblCurrLocation.Text = location
	CallSub2(Starter, "SetSubBase", locationCode)
	Sleep(0)
	CallSub(Starter, "SetSubGetUnits")
	Sleep(0)
	StartConnection
End Sub

Sub tmrBordAlive_Tick
	If Not(checkConnectTime) Then Return
	
	
	CheckLastAliveTime
	Return
	If Starter.diedIndex > -1 Then
		clvServer.RemoveAt(Starter.diedIndex)
		Starter.serverList.RemoveAt(Starter.diedIndex)
		Starter.diedIndex = -1
	End If
	ServerAlive
End Sub

Sub checkConnectTime As Boolean
	If connectTime <> -1 Then
		pnlNobords.Visible = True
		mqttGetBord.Disconnect
		tmrBordLastAlive.Enabled = False
		Msgbox2Async("Geen borden gevonden", Application.LabelName, "OKE", "", "", Application.Icon, False)
		Wait For Msgbox_Result (Result As Int)
		If Result = DialogResponse.POSITIVE Then
			'...
		End If
		pnlNobords.Visible = False
		Return False
	End If
	Return True
End Sub

Sub CheckLastAliveTime
	Dim currTime As Long = DateTime.Now
	Dim timeDiff As Long
	Dim bordAlive As Boolean = True
	
	If lblLastCheck.IsInitialized = False Then
		lblNoBord.Visible = False
		Return
	End If
	
	lblLastCheck.Text = $"Laatste controle $Time{DateTime.Now}"$
	
	For Each bd As bordStatus In Starter.serverList
		timeDiff = currTime-bd.timeStamp
		If timeDiff >= Starter.serverDied Then
			bd.alive = False
			baseFile.SetBordDiedByName(bd.name, clvServer, bd.alive)
		Else
			baseFile.SetBordDiedByName(bd.name, clvServer, bd.alive)
		End If
	Next
	
	
End Sub

Sub ShowNotConnectedToBroker
	lblNoBord.Text = "Verbinding borden verbroken"
	pnlNobords.SetVisibleAnimated(1000, True)
End Sub

Sub Activity_Resume
'	getBaseList
'	Return
	If Starter.mqttGetBordsActive Then
		If Starter.serverList.Size > 0 Then
			clvServer.Clear
			pnlNobords.SetVisibleAnimated(100, False)
			For Each bd As bordStatus In Starter.serverList
				clvServer.Add(genUnitList(bd.name, bd.alive), "")
			Next
		End If
		If CheckClientConnected = False Then
			mqttGetBord.Connect
		End If
	End If
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	tmrBordLastAlive.Enabled = False
'	Log("CLOSE")
'	If mqttGetData.connected Then
'		mqttGetData.Disconnect
'	End If
'	If mqttGetBord.Connected Then
'		mqttGetBord.Disconnect
'	End If
'	Activity.Finish
'	DisconnectMqtt
End Sub

Private Sub Activity_KeyPress(KeyCode As Int) As Boolean
	If KeyCode = KeyCodes.KEYCODE_BACK Then
		tmrBordLastAlive.Enabled = False
		DisconnectMqtt
		Activity.Finish
		
		Return False
	Else
		Return False
	End If
End Sub

Sub DisconnectMqtt
	If mqttGetData.connected Then
		mqttGetData.Disconnect
	End If
	If CheckClientConnected Then
		mqttGetBord.Disconnect
	End If
	
End Sub

Sub genUnitList(name As String, alive As Boolean) As Panel
	Dim p As Panel
	p.Initialize(Me)
	p.SetLayout(0dip, 0dip, clvServer.AsView.Width, 95dip) '190
	p.LoadLayout("clvBorden")
	p.Tag = name
	
	lblBordName.Text = name.Trim
'	lblLastCheck.Text = $"Laatste controle $Time{DateTime.Now}"$
	BordDiedProgress.Show
	If Not(alive) Then
		lblViewBord.Enabled = False
	End If
	Return p
End Sub

Sub CheckIpExits(bord As String)
	
	Dim bordExists As Boolean = False
	Dim name As String = ""
	
	If bord.Length = 0 Then Return
	connectTime = -1
	
	name = bord

	If Starter.serverList.Size = 0 Then
		AddUnkownIp("", name)
		Return
	End If
	
	For Each lst As bordStatus In Starter.serverList
		If lst.name = name Then
			bordExists = True
			lst.timeStamp = DateTime.Now
			lst.alive = True
		End If
	Next
	
'	ServerAlive
	
	If Not(bordExists) Then
		AddUnkownIp("", name)
		Return
	End If
End Sub

Sub ServerAlive
'	Log($"BORD ALIVE TEST at $Time{DateTime.Now}"$)
	Dim msNow As Long = DateTime.Now
	For Each lst As bordStatus In Starter.serverList
		If(msNow - lst.timeStamp) > Starter.serverDied And lst.alive = True Then
			lst.alive = False
			CheckIpInClv(lst)
			Return
		Else
			CheckIpInClv(lst)
		End If
	Next
End Sub

Sub AddUnkownIp(ip As String, name As String)
	Dim bordStatus As bordStatus
	bordStatus.Initialize
	bordStatus.ip = ip
	bordStatus.name = name
	bordStatus.timeStamp = DateTime.Now
	bordStatus.alive = True
	Starter.serverList.Add(bordStatus)
	CheckIpInClv(bordStatus)
	baseFile.SetBordDiedByName(name, clvServer, True)
	
	If clvServer.GetSize > 0 Then
		pnlNobords.SetVisibleAnimated(500, False)
	Else 
		pnlNobords.SetVisibleAnimated(500, True)	
	End If
	
	lblLastCheck.Text = $"Laatste controle $Time{DateTime.Now}"$
	Sleep(400)
	
End Sub

Sub CheckIpInClv(bord As bordStatus)
	Dim p As Panel
	Dim lbl As Label
	
	For i = 0 To clvServer.GetSize-1
		p = clvServer.GetPanel(i)
		If p.Tag = bord.name Then
			For Each v As View In p.GetAllViewsRecursive
				If v.Tag = "lblLastCheck" Then
					lbl = v
					lbl.Text = $"Laatste controle $Time{DateTime.Now}"$
				End If
			Next
			
			For Each v As View In p.GetAllViewsRecursive
				If v.Tag = "viewbord" Then
					lbl = v
					If bord.alive = False Then
						lbl.Enabled = False
						lbl.TextColor = Colors.Red
						Starter.diedIndex = i
					Else
						lbl.Enabled = True
						lbl.TextColor = 0xFF027F00
					End If
					Return
				End If
			Next
		End If
	Next
	
'	Log("------ ADD BORD TO LIST")
	pnlNobords.SetVisibleAnimated(1000, False)
	clvServer.Add(genUnitList(bord.name, bord.alive), "")
End Sub

Sub lblViewBord_Click
	Dim v As View = Sender
	Dim p As Panel = v.Parent
	
	clvServer_ItemClick (clvServer.GetItemFromView(p), Null)
End Sub

Private Sub PrepTopicName(bord As String) As String
	Return bord.Replace(" ", "")
End Sub

Sub clvServer_ItemClick (Index As Int, Value As Object)
	Dim p As Panel = clvServer.GetPanel(Index)
	Dim lbl As Label
	
	
	For Each c As View In p.GetAllViewsRecursive
		If c.Tag = "name" Then
			lbl = c
			'Starter.selectedBordName = PrepTopicName(lbl.Text)
			
			CallSub2(Starter, "SetUnit", PrepTopicName(lbl.Text).ToLowerCase)
			Starter.DiscoveredServer = lbl.Text
			Exit
		End If
	Next
	
	DisconnectMqtt
	Sleep(100)
	StartActivity(ServerBoard)
End Sub

Sub btnCancel_Click
	Msgbox2Async("Applicatie afsluiten?", Application.LabelName, "JA", "", "NEE", Application.Icon, False)
	Wait For Msgbox_Result(Result As Int)
	If Result = DialogResponse.POSITIVE Then
		Activity.Finish
	End If
End Sub

Sub btnOk_Click
	If edtFloatCode.Text = "" Then
		Msgbox2Async("Locatie code mag niet leeg zijn", Application.LabelName, "OKE", "", "", Application.Icon, False)
		Wait For Msgbox_Result(Result As Int)
		Return
	End If
	
	Dim ime As IME
	ime.Initialize(Me)
	Starter.testBaseName = True
	mqttGetBord.Initialize
	CallSub2(Starter, "SetSubBase", edtFloatCode.Text)
	CallSub(Starter, "SetSubGetUnits")
	mqttGetBord.SetPubBord
	Sleep(100)
	mqttGetBord.Connect
	
	Sleep(1000)
	
	If mqttGetBord.connected = False Then
		Msgbox2Async("Kan geen verbinding maken met locatie", Application.LabelName, "OKE", "", "", Application.Icon, False)
		Wait For Msgbox_Result(Result As Int)
	Else
		Dim code, description As String
		
		code = edtFloatCode.Text
		If edtFloatDescription.Text = "" Then edtFloatDescription.Text = "Nieuwe locatie"
		description = edtFloatDescription.Text
		ToastMessageShow("Verbonden met locatie", True)
		mqttGetBord.Disconnect
		pnlLocationCOde.Visible = False
		baseFile.SetBase(code, description, "1")
		InitConnection(code, description)
		'StartConnection
		ime.HideKeyboard
	End If
End Sub

Sub edtLocationCode_TextChanged (Old As String, New As String)
	If New.Length > 0 Then
		btnOk.Enabled = True
	Else
		btnOk.Enabled = False
	End If
End Sub

Sub pnlLocation_Click
	If CheckClientConnected Then
		mqttGetBord.Disconnect
	End If
	StartActivity(locations)
End Sub

Private Sub CheckClientConnected As Boolean
	Return CallSub(mqttGetBord, "GetClientConnected")
End Sub

Private Sub ErrorConnecting
	Msgbox2Async("Kan geen verbinding maken met locatie"&CRLF&"Controleer locatie code", Application.LabelName, "OKE", "", "", Application.Icon, False)
	Wait For Msgbox_Result (Result As Int)
	If Result = DialogResponse.POSITIVE Then
		mqttGetBord.Disconnect
	End If
End Sub

Sub pnlLocationList_Click
	StartActivity(SelectLocation)
End Sub

Sub edtFloatDescription_TextChanged (Old As String, New As String)
	
End Sub

Sub edtFloatCode_TextChanged (Old As String, New As String)
	If New.Length > 0 Then
		btnOk.Enabled = True
	Else
		btnOk.Enabled = False
	End If
End Sub


